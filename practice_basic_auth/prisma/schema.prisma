generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// AUTHENTICATION & USER MANAGEMENT SCHEMA
// =============================================

// Main User model - core user information
model User {
  //  Primary fields
  id                 String              @id @default(cuid())
  email              String              @unique
  username           String?             @unique
  firstName          String?
  lastName           String?
  avatar             String?
  phone              String?
  isActive           Boolean             @default(true)
  isVerified         Boolean             @default(false)
  lastLoginAt        DateTime?

  // Timestamps
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  auditLogs          AuditLog[]
  emailVerifications EmailVerification[]
  oauthAccounts      OAuthAccount[]
  passwordResets     PasswordReset[]
  passwords          Password[]
  refreshTokens      RefreshToken[]
  sessions           Session[]

  // Indexes
  @@map("users")
}

// Password management - supports multiple passwords per user for history
model Password {
  // Primary fields
  id        String   @id @default(cuid())
  userId    String
  hash      String
  isActive  Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@map("passwords")
}

// OAuth accounts - for Google, Facebook, GitHub, etc.
model OAuthAccount {
  // Primary fields
  id           String    @id @default(cuid())
  userId       String
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

// User sessions for tracking active logins
model Session {
  //  Primary fields
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  expiresAt DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@map("sessions")
}

// JWT Refresh tokens
model RefreshToken {
  // Primary fields
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  userAgent String?
  ipAddress String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@map("refresh_tokens")
}

// =============================================
// SECURITY FEATURES
// =============================================

// Email verification tokens
model EmailVerification {
  // Primary fields
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique

  // Timestamps
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@map("email_verifications")
}

// Password reset tokens
model PasswordReset {
  // Primary fields
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@map("password_resets")
}

// Audit log for security events
model AuditLog {
  // Primary fields
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  success   Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id])

  // Indexes
  @@map("audit_logs")
}
